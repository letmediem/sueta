import telebot
from telebot import types
import feedparser
import validators
import time
import json
import os
import requests

TOKEN = '6234035704:AAFnKMchmh0IRp3LWxRGhuiJuNFlIYKWk2Q'
bot = telebot.TeleBot(TOKEN)

user_rss = {}
user_notifications = {}
tracked_podcasts_file = 'tracked_podcasts.json'

if os.path.exists(tracked_podcasts_file):
    with open(tracked_podcasts_file, 'r') as f:
        user_rss = json.load(f)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True) #–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
    itembtn1 = types.KeyboardButton('–ù–∞–π—Ç–∏ –≤—ã–ø—É—Å–∫–∏ –ø–æ–¥–∫–∞—Å—Ç–∞')
    itembtn2 = types.KeyboardButton('–ú–æ–∏ –ø–æ–¥–∫–∞—Å—Ç—ã')
    itembtn3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç')
    markup.add(itembtn1, itembtn2, itembtn3)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup) #—Ç–µ–ø–µ—Ä—å –±–æ—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ –∏–º–µ–Ω–∏


@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ –≤—ã–ø—É—Å–∫–∏ –ø–æ–¥–∫–∞—Å—Ç–∞')
def find_podcasts(message):
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ rss:')
    bot.register_next_step_handler(msg, get_podcast_links)

#–∏–∑–º–µ–Ω–µ–Ω–∏–µ
def get_podcast_links(message):
    url = message.text
    validations = validators.url(url) #–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ (08.04.2023, 22:00)
    if validations:
        feed = feedparser.parse(url)
        episodes = []

        for entry in feed.entries:
            episodes.append({'title': entry.title, 'link': entry.enclosures[0].href})


        print((episodes))

        if len(episodes): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–ø—É—Å–∫–æ–≤ –≤ –ø–æ–¥–∫–∞—Å—Ç–µ
            user_rss[message.chat.id] = episodes
            send_inline_keyboard(message)
            # get_podcast_mp3(message)
        else:
            bot.send_message(message.chat.id, "–í—ã–ø—É—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞')


def send_inline_keyboard(message, page=0, edit=False):
    markup = types.InlineKeyboardMarkup()
    start_idx = page * 10
    end_idx = start_idx + 10
    episodes = user_rss[message.chat.id][start_idx:end_idx]

    for idx, episode in enumerate(episodes):
        markup.add(types.InlineKeyboardButton(text=f'{episode["title"]}', callback_data=f'episode_{start_idx + idx}'))

    if len(user_rss[message.chat.id]) > end_idx:
        markup.add(types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data=f'next_page_{page + 1}'))

    if page > 0:
        markup.add(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data=f'prev_page_{page - 1}'))

    if edit:
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø—É—Å–∫ –ø–æ–¥–∫–∞—Å—Ç–∞:',
                              reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø—É—Å–∫ –ø–æ–¥–∫–∞—Å—Ç–∞:', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('next_page_') or call.data.startswith('prev_page_'))
def paginate_podcasts(call):
    page = int(call.data.split('_')[2])
    send_inline_keyboard(call.message, page, edit=True)



@bot.callback_query_handler(func=lambda call: call.data.startswith('episode_'))
def send_episode(call):
    episode_idx = int(call.data.split('_')[1])
    bot.send_message(call.message.chat.id, f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–ø—É—Å–∫: {user_rss[call.message.chat.id][episode_idx]["link"]}')
    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–æ–∑–∞–ø–∏—Å—å
    url = user_rss[call.message.chat.id][episode_idx]["link"]
    response = requests.get( url )
    with open( user_rss[call.message.chat.id][episode_idx]["title"], 'wb' ) as f:
        f.write( response.content )
    audio = open( user_rss[call.message.chat.id][episode_idx]["title"], 'rb' )
    bot.send_document( call.message.chat.id, audio )
#–∏–∑–º–µ–Ω–µ–Ω–∏–µ 10.04 23:11
    try:
        bot.send_message(call.message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ‚úÖ')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... ‚ö†Ô∏è')
        
        
@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –ø–æ–¥–∫–∞—Å—Ç—ã')
def show_my_podcasts(message):
    chat_id = str(message.chat.id)
    if chat_id in user_notifications:
        send_my_podcasts_keyboard(message)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–∞—Å—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç'.")


def send_my_podcasts_keyboard(message):
    chat_id = str(message.chat.id)
    if chat_id in user_notifications:
        markup = types.InlineKeyboardMarkup()
        podcasts = user_notifications[chat_id]

        for idx, podcast in enumerate(podcasts):
            status = 'üîî' if podcast['enabled'] else 'üîï'
            markup.add(types.InlineKeyboardButton(text=f"{status} {podcast['title']}", callback_data=f'toggle_{idx}'))

        markup.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç', callback_data='add_podcast'))
        bot.send_message(message.chat.id, '–í–∞—à–∏ –ø–æ–¥–∫–∞—Å—Ç—ã:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–∞—Å—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç'.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_'))
def toggle_notification(call):
    chat_id = str(call.message.chat.id)
    podcast_idx = int(call.data.split('_')[1])
    user_notifications[chat_id][podcast_idx]['enabled'] = not user_notifications[chat_id][podcast_idx]['enabled']
    send_my_podcasts_keyboard(call.message)


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç')
def add_podcast(message):
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ rss –ø–æ–¥–∫–∞—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:')
    bot.register_next_step_handler(msg, add_podcast_to_list)


def add_podcast_to_list(message):
    url = message.text
    chat_id = str(message.chat.id)
    feed = feedparser.parse(url)

    if 'title' not in feed.feed:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ rss –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    podcast_title = feed.feed.title
    podcast_info = {'title': podcast_title, 'url': url, 'enabled': True}

    if chat_id in user_notifications:
        user_notifications[chat_id].append(podcast_info)
    else:
        user_notifications[chat_id] = [podcast_info]

    save_notifications()
    bot.send_message(message.chat.id, f"–ü–æ–¥–∫–∞—Å—Ç '{podcast_title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")


def save_notifications():
    with open(tracked_podcasts_file, 'w') as f:
        json.dump(user_notifications, f)


bot.polling(non_stop=True)
